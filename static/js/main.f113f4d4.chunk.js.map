{"version":3,"sources":["actions/counterActions.js","actions/types.js","components/Counter.js","components/Counterfunc.js","reducers/counterReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["inc","type","payload","dec","reset","Counter","_this$props","this","props","count","counter","console","log","react_default","a","createElement","className","onClick","Component","connect","state","asyncInc","dispatch","axios","get","then","res","data","id","catch","err","_ref","initialState","combineReducers","arguments","length","undefined","action","Object","objectSpread","middleWare","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","apply","App","es","components_Counterfunc","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f113f4d4.chunk.js","sourcesContent":["import axios from \"axios\";\nimport {\n  INC_COUNTER,\n  DEC_COUNTER,\n  RESET_COUNTER,\n  ASYNC_INC_COUNTER\n} from \"./types\";\n\nexport const asyncInc = () => dispatch => {\n  axios\n    .get(`https://jsonplaceholder.typicode.com/users/1`)\n    .then(res => {\n      // console.log(res.data);\n      // console.log(res.data.id);\n      if (res.data) {\n        dispatch({\n          type: ASYNC_INC_COUNTER,\n          payload: res.data.id\n        });\n      }\n    })\n    .catch(err => {\n      console.log(err);\n    });\n};\n\nexport const inc = () => {\n  return {\n    type: INC_COUNTER,\n    payload: 1\n  };\n};\n\nexport const dec = () => {\n  return {\n    type: DEC_COUNTER,\n    payload: -1\n  };\n};\n\nexport const reset = () => {\n  return {\n    type: RESET_COUNTER,\n    payload: 0\n  };\n};\n","export const INC_COUNTER = \"INC_COUNTER\";\nexport const DEC_COUNTER = \"DEC_COUNTER\";\nexport const RESET_COUNTER = \"RESET_COUNTER\";\nexport const ASYNC_INC_COUNTER = \"ASYNC_INC_COUNTER\";\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { inc, dec, reset } from \"../actions/counterActions\";\nimport PropTypes from \"prop-types\";\n\nclass Counter extends Component {\n  static propTypes = {\n    inc: PropTypes.func.isRequired,\n    dec: PropTypes.func.isRequired,\n    reset: PropTypes.func.isRequired\n  };\n\n  componentDidMount() {}\n\n  // onIncClick = id => {\n  //   this.props.inc();\n  // };\n\n  // onIncClick = id => {\n  //   this.props.inc();\n  // };\n\n  // onIncClick = id => {\n  //   this.props.inc();\n  // };\n\n  // onEditClick = id => {\n  //   this.props.getapp(id);\n  // };\n\n  render() {\n    const {\n      counter: { count },\n      inc,\n      dec,\n      reset\n    } = this.props;\n    console.log(this.props.counter);\n    return (\n      <div className=\"container\">\n        <h1>Counter</h1>\n        <p>Count: {count}</p>\n        <button onClick={inc} type=\"button\" className=\"btn btn-primary mr-2\">\n          Inc\n        </button>\n        <button onClick={dec} type=\"button\" className=\"btn btn-secondary mr-2\">\n          Dec\n        </button>\n        <button onClick={reset} type=\"button\" className=\"btn btn-success\">\n          Reset\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  counter: state.counter\n});\n\nexport default connect(\n  mapStateToProps,\n  { inc, dec, reset }\n)(Counter);\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { inc, dec, reset, asyncInc } from \"../actions/counterActions\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Counterfunc = ({ counter: { count }, inc, dec, reset, asyncInc }) => {\r\n  // console.log(props);\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Counter</h1>\r\n      <p>Count: {count}</p>\r\n      <button onClick={inc} type=\"button\" className=\"btn btn-primary mr-2\">\r\n        Inc\r\n      </button>\r\n      <button onClick={dec} type=\"button\" className=\"btn btn-secondary mr-2\">\r\n        Dec\r\n      </button>\r\n      <button onClick={reset} type=\"button\" className=\"btn btn-success\">\r\n        Reset\r\n      </button>\r\n      <button onClick={asyncInc} type=\"button\" className=\"btn btn-danger\">\r\n        Async Inc\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nCounterfunc.propTypes = {\r\n  inc: PropTypes.func.isRequired,\r\n  dec: PropTypes.func.isRequired,\r\n  reset: PropTypes.func.isRequired,\r\n  asyncInc: PropTypes.func.isRequired,\r\n  counter: PropTypes.object\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  counter: state.counter\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { inc, dec, reset, asyncInc }\r\n)(Counterfunc);\r\n","import {\n  INC_COUNTER,\n  DEC_COUNTER,\n  RESET_COUNTER,\n  ASYNC_INC_COUNTER\n} from \"../actions/types\";\n\nconst initialState = {\n  count: 0\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case INC_COUNTER:\n    case DEC_COUNTER:\n      console.log(\"INC/DEC_COUNTER called\");\n      return {\n        ...state,\n        count: state.count + action.payload\n      };\n    case ASYNC_INC_COUNTER:\n      console.log(\"ASYNC_INC_COUNTER was called\");\n      return {\n        ...state,\n        count: state.count + action.payload\n      };\n    case RESET_COUNTER:\n      // console.log(\"get apps was called\");\n      return {\n        ...state,\n        count: +action.payload\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport counterReducer from \"./counterReducer\";\n\nexport default combineReducers({\n  counter: counterReducer\n});\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleWare = [thunk];\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeEnhancers(applyMiddleware(...middleWare))\n);\n\nexport default store;\n","import React, { Component } from \"react\";\nimport Counter from \"./components/Counter\";\nimport Counterfunc from \"./components/Counterfunc\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        {/* <Counter /> */}\n        <Counterfunc />\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}